classdef brain_observatory_cache < handle
    
    properties
        session_table
        container_table
        selected_session_table
        stimuli
        targeted_structure
        imaging_depth
        cont_id
        session_id
        failed = 0
    end
    
    methods
        % initialize
        function boc = brain_observatory_cache (references)
            boc.session_table = references.session_manifest;
            boc.cont_table = references.container_manifest;
        end
        
        function get_number_of_expriment_containers (boc)
            size(boc.cont_table,1)
        end
        
        function get_number_of_valid_experiment_containers (boc)
            size(boc.cont_table(boc.cont_table.failed==0,:),1)
        end
        
        function get_all_imaing_depths (boc)
            categories(categorical(cellstr(num2str((boc.cont_table.imaging_depth)))))
        end
        
        function summarize_distribution_of_container_along_imaing_depths (boc)
            summary(categorical(cellstr(num2str((boc.cont_table.imaging_depth)))))
        end
        
        function result = get_all_targeted_structures (boc)
            container_targeted_structure_table = struct2table(boc.cont_table.targeted_structure);
            result = categories(categorical(cellstr(container_targeted_structure_table.acronym)))
        end
        
        function result = summarize_distribution_of_container_along_targeted_structure (boc)
            container_targeted_structure_table = struct2table(boc.cont_table.targeted_structure);
            result = summary(categorical(cellstr(container_targeted_structure_table.acronym)))
        end
        
        function get_all_session_types (boc)
            categories(categorical(cellstr((boc.session_table.stimulus_name))))
        end
        
        function get_all_stimuli (boc)
            session_by_stimuli = get_session_by_stimuli();
            categories(categorical([session_by_stimuli.three_session_A,session_by_stimuli.three_session_B,...
                session_by_stimuli.three_session_C,session_by_stimuli.three_session_C2]))
        end
        
        function get_all_cre_lines (boc)
            categories(categorical(boc.cont_table.cre_lines))
        end
        
        function get_all_cell_specimens (boc)
        end
        
        
        function get_session (boc)
            
            session_by_stimuli = get_session_by_stimuli();
            boc.selected_session_table =  boc.session_table;
            
            if ~isempty(boc.cont_id)
                boc.selected_session_table = boc.selected_session_table(boc.session_table.experiment_container_id == boc.cont_id, :);
                % complete stimuli when looked up
                if isempty(boc.stimuli)
                    all_sessions_exist = boc.selected_session_table.stimulus_name;
                    session_by_stimuli = get_session_by_stimuli();
                    all_stimuli_exist = {};
                    for i = 1:3
                        all_stimuli_exist = [all_stimuli_exist session_by_stimuli.(char(all_sessions_exist(i)))];
                    end
                    boc.stimuli = categories(categorical(all_stimuli_exist));
                end
                % complete imaing_depth when looked up
                if isempty(boc.imaging_depth)
                    boc.imaging_depth = boc.selected_session_table.imaging_depth(1);
                end
                % complete targeted_structure when looked up
                if isempty(boc.targeted_structure)
                    boc.targeted_structure = boc.selected_session_table.targeted_structure.acronym;
                end
                % complete session_id when looked up
                if isempty(boc.session_id)
                    boc.session_id = boc.selected_session_table.id;
                end
            end
            
            if ~isempty(boc.session_id)
                boc.selected_session_table = boc.selected_session_table(boc.selected_session_table.id == boc.session_id, :);
                % complete stimuli when looked up
                if isempty(boc.stimuli)
                    session_type = boc.selected_session_table.stimulus_name;
                    session_by_stimuli = get_session_by_stimuli();
                    boc.stimuli = session_by_stimuli.(char(session_type));
                end
                % complete imaing_depth when looked up
                if isempty(boc.imaging_depth)
                    boc.imaging_depth = boc.selected_session_table.imaging_depth;
                end
                % complete targeted_structure when looked up
                if isempty(boc.targeted_structure)
                    boc.targeted_structure = boc.selected_session_table.targeted_structure.acronym;
                end
                % complete cont_id when looked up
                if isempty(boc.cont_id)
                    boc.cont_id = boc.selected_session_table.experiment_container_id;
                end
            end
            
            if boc.failed == 0
                failed_container_id = boc.cont_table((boc.cont_table.failed == 1),:)...
                    .id;
                boc.selected_session_table = boc.selected_session_table(~ismember(boc.selected_session_table.experiment_container_id,failed_container_id),:);
            end
            
            if ~isempty(boc.stimuli)
                boc.selected_session_table =  boc.selected_session_table(ismember(boc.selected_session_table.stimulus_name,...
                    find_session_for_stimuli(boc.stimuli,session_by_stimuli)), :);
            end
            
            if ~isempty(boc.imaging_depth)
                boc.selected_session_table = boc.selected_session_table(boc.selected_session_table.imaging_depth == boc.imaging_depth, :);
            end
            
            if ~isempty(boc.targeted_structure)
                if size(boc.selected_session_table,1) > 1
                    
                    exp_targeted_structure_session_table = struct2table(boc.selected_session_table.targeted_structure);
                    boc.selected_session_table = boc.selected_session_table(ismember(exp_targeted_structure_session_table.acronym, boc.targeted_structure), :);
                else
                    if size(boc.selected_session_table,1) == 0
                        fprintf('not even a single session can met all of your creteria')
                    else
                        boc.selected_session_table = boc.selected_session_table(strcmp( boc.selected_session_table.targeted_structure.acronym,boc.targeted_structure),:);
                    end
                end
            end
        end
        
        function get_session_data(boc, save_directory_name)
            
            % prepare folder
            if ~exist(save_directory_name,'dir')
                mkdir(save_directory_name)
            end
            
            % get the NWB file URL for selected sessions
            allen_institute_base_url = 'http://api.brain-map.org';
            for cur = 1 : size(boc.selected_session_table,1)
                cur_url = boc.selected_session_table(cur, :). well_known_files.download_link;
                full_url = [allen_institute_base_url cur_url];
                cur_id = boc.selected_session_table(cur, :).id;
                save_file_name = [save_directory_name num2str(cur_id) '.nwb'];
                if ~exist(save_file_name,'file')
                    fprintf('now download the file, which is around 500 MB')
                    outfilename = websave(save_file_name, full_url)
                end
            end
        end
    end
end